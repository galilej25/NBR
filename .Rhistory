axis(side = 2, lwd = 2, las = 1)
# Null dist
polygon(c(b0_avg[,3]-b0_avg[,4]*1.96, rev(b0_avg[,3]+b0_avg[,4]*1.96)),
c(1:nrow(b0_avg),nrow(b0_avg):1),
col = scales::alpha("gray",0.35), border = F)
lines(b0_avg[,3], 1:nrow(b0_avg), col = "gray", lwd = 2)
# Observed
polygon(c(b0_avg[,1]-b0_avg[,2]*1.96, rev(b0_avg[,1]+b0_avg[,2]*1.96)),
c(1:nrow(b0_avg),nrow(b0_avg):1),
col = scales::alpha("blue",0.35), border = F)
lines(b0_avg[,1], 1:nrow(b0_avg), col = "darkblue", lwd = 2)
# Legend
legend("topright", legend = c("OBS","PERM"), col = c("darkblue","gray"), lwd = 2)
# Betti-1
tseq <- seq(0, 1, length = 1000)
outfile <- file.path(tda_dir,"b1avg.rds")
if(!file.exists(outfile)){
b1 <- t(sapply(1:nrow(datos), function(x) landscape(rips_list[[x]][[1]], tseq = tseq)))
# Betti-0 intercept and 95% CI
b1_avg <- array(as.numeric(0), dim = c(1000,4))
for(ii in 1:1000){
if(sum(b1[,ii])>0){
datos$y <- b1[,ii]
fit <- tryCatch(lmer(y ~ 1 + (1|BIDS.ID), data = datos), error=function(e) NA)
if(!is.na(fit)){
fit <- summary(lmer(y ~ 1 + (1|BIDS.ID), data = datos))
b1_avg[ii,1:2] <- fit$coefficients[1:2]
}
}
}
# Null distribution Betti-1
b1 <- t(sapply(1:length(null_list), function(x) landscape(null_list[[x]][[1]], tseq = tseq)))
b1_avg[,3] <- colMeans(b1)
b1_avg[,4] <- apply(b1,2,sd)/nrow(b1)
b1_avg <- b1_avg*length(tseq)
# Save sample averages
saveRDS(b1_avg, outfile)
}
b1_avg <- readRDS(outfile)
# Plot
#svg(file.path(plt_dir,"TDA_b1_avg.svg"), 6,4)
plot(tseq, b1_avg[,3], type = "n", xlim = c(0,1), las = 1, frame.plot = F,
ylab = "Betti-1", xlab = "Filtration Value", main = "Betti-1 sample intercept")
axis(side = 1, lwd = 2)
axis(side = 2, lwd = 2, las = 1)
# Null dist
polygon(c(tseq,rev(tseq)),
c(b1_avg[,3]-b1_avg[,4]*1.96, rev(b1_avg[,3]+b1_avg[,4]*1.96)),
col = scales::alpha("gray",0.35), border = F)
lines(tseq, b1_avg[,3], col = "gray", lwd = 2)
# Observed
polygon(c(tseq,rev(tseq)),
c(b1_avg[,1]-b1_avg[,2]*1.96, rev(b1_avg[,1]+b1_avg[,2]*1.96)),
col = scales::alpha("blue",0.35), border = F)
lines(tseq, b1_avg[,1], col = "darkblue", lwd = 2)
# Legend
legend("topright", legend = c("OBS","PERM"), col = c("darkblue","gray"), lwd = 2)
# Read data
datos <- read.csv(file.path(tda_dir,"betti.csv"))
# Remove columns with NA's
datos <- datos[,which(apply(datos,2,function(x) sum(is.na(x)))==0)]
# Generate one sex columns
# Compute PDS-Sex interaction manually
datos$AgeM <- datos$Age; datos$AgeM[datos$Sex=="F"] <- 0
datos$PDSeM <- datos$PDSe; datos$PDSeM[datos$Sex=="F"] <- 0
# Compute whole-connectome AIC
#tda_var <- c("b0_auc","b1_auc","b1_n")
tda_var <- c("b0_auc","b1_auc")
# Load 'gamlss', 'gamm4', & ' package for GAMM analyses
if(require(gamlss)==0) install.packages("gamlss"); library(gamlss)
if(require(gamm4)==0) install.packages("gamm4"); library(gamm4)
if(require(lme4)==0) install.packages("lme4"); library(lme4)
# Apply models to TDA features
for(tt in 1:length(tda_var)){
print(tda_var[tt])
# LME model (age slope)
grp_form <- as.formula(paste0(tda_var[tt], " ~ Age + FDRMS + Coil + (1|BIDS.ID)"))
fitLIN <- tryCatch(lmer(grp_form,
data = datos,
REML = F),
error=function(e) NA)
print(tryCatch(AIC(fitLIN), error=function(e) NA))
# LME model (age-sex slope)
grp_form <- as.formula(paste0(tda_var[tt], " ~ Age*Sex + FDRMS + Coil + (1|BIDS.ID)"))
fitLINi <- tryCatch(lmer(grp_form,
data = datos,
REML = F),
error=function(e) NA)
print(tryCatch(AIC(fitLINi), error=function(e) NA))
# GAMM model (age spline)
grp_form <- as.formula(paste0(tda_var[tt], " ~ s(Age) + FDRMS + Coil"))
fitGAMM <- tryCatch(gamm4(grp_form,
random = ~ (1|BIDS.ID),
data = datos,
REML = F),
error=function(e) NA)
print(tryCatch(AIC(fitGAMM$mer), error=function(e) NA))
# GAMM model (age*sex splines)
grp_form <- as.formula(paste0(tda_var[tt], " ~ s(Age, by=Sex) + Sex + FDRMS + Coil"))
fitGAMMi <- tryCatch(gamm4(grp_form,
random = ~ (1|BIDS.ID),
data = datos,
REML = F),
error=function(e) NA)
print(tryCatch(AIC(fitGAMMi$mer), error=function(e) NA))
# GAMM model (Age LOESS)
grp_form <- as.formula(paste0(tda_var[tt], " ~ lo(~Age) + FDRMS + Coil + re(random = ~1|BIDS.ID)"))
fitLO <- tryCatch(gamlss(grp_form, data = datos,
control = gamlss.control(n.cyc = 30)),
error=function(e) NA)
print(tryCatch(AIC(fitLO), error=function(e) NA))
# GAMM model (Age*sex LOESS)
grp_form <- as.formula(paste0(tda_var[tt], " ~ lo(~Age)+lo(~AgeM)+Sex + FDRMS + Coil + re(random = ~1|BIDS.ID)"))
fitLOi <- tryCatch(gamlss(grp_form, data = datos,
control = gamlss.control(n.cyc = 30)),
error=function(e) NA)
print(tryCatch(AIC(fitLOi), error=function(e) NA))
# GAMM model (PDS LOESS)
grp_form <- as.formula(paste0(tda_var[tt], " ~ lo(~PDSe) + FDRMS + Coil + re(random = ~1|BIDS.ID)"))
fitPDS <- tryCatch(gamlss(grp_form, data = datos,
control = gamlss.control(n.cyc = 30)),
error=function(e) NA)
print(tryCatch(AIC(fitPDS), error=function(e) NA))
# GAMM model (PDS*sex splines)
grp_form <- as.formula(paste0(tda_var[tt], " ~ lo(~PDSe)+lo(~PDSeM)+Sex + FDRMS + Coil + re(random = ~1|BIDS.ID)"))
fitPDSi <- tryCatch(gamlss(grp_form, data = datos,
control = gamlss.control(n.cyc = 30)),
error=function(e) NA)
print(tryCatch(AIC(fitPDSi), error=function(e) NA))
}
# 2) Plot results - whole-connectome
# Create output directory
plt_dir <- "~/R/github/Pubertal_TDA/Inference/"
if(!dir.exists(plt_dir)) dir.create(plt_dir)
tt <- 1
# Compute model
# GAMM model (PDS LOESS)
grp_form <- as.formula(paste0(tda_var[tt], " ~ lo(~PDSe) + FDRMS + Coil + re(random = ~1|BIDS.ID)"))
fitPDS <- tryCatch(gamlss(grp_form, data = datos,
control = gamlss.control(n.cyc = 30)),
error=function(e) NA)
print(tryCatch(AIC(fitPDS), error=function(e) NA))
drop1(fitPDS)
# Calculate TDA variable residuals
res_frm <- as.formula(paste0(tda_var[tt], "~ FDRMS + Coil + (1|BIDS.ID)"))
datos$res <- scale(residuals(lmer(res_frm, data = datos, REML = F)))
plt_form <- as.formula("res ~ lo(~PDSe)")
fit_plt <- getSmo(gamlss(plt_form, data = datos))
datos$preds <- predict(fit_plt)
datos$preds_se <- predict(fit_plt, se = T)[[2]]
# Generate plot
gSC <- ggplot(data = datos, mapping = aes(x = PDSe)) +
geom_line(aes(y = res, group = BIDS.ID, color = Sex), size=.25) +
geom_point(aes(y = res, color = Sex)) +
geom_ribbon(aes(ymax = preds + 1.96 * preds_se,
ymin = preds - 1.96 * preds_se,
linetype = NA), alpha = 0.2) +
geom_line(aes(y = preds), size = 1.5) +
ylab("Residuals") + xlab("PDS") + ggtitle(tda_var[tt]) +
theme_light()
# Save plot
outfile <- paste0(plt_dir,"/GAMM_TDA_",tda_var[tt],"_loPDS.svg")
# Plot against Age as well, as a supportive info
# GAMM model (age spline)
grp_form <- as.formula(paste0(tda_var[tt], " ~ s(Age) + FDRMS + Coil"))
fitGAMM <- tryCatch(gamm4(grp_form,
random = ~ (1|BIDS.ID),
data = datos,
REML = F),
error=function(e) NA)
print(tryCatch(AIC(fitGAMM$mer), error=function(e) NA))
# Calculate TDA variable residuals
plt_form <- as.formula("res ~ s(Age)")
fit_plt <- gamm4(plt_form, data = datos)
datos$preds <- predict(fit_plt)
predict(fit_plt)
# Calculate TDA variable residuals
plt_form <- as.formula("res ~ + s(Age)")
fit_plt <- gamm4(plt_form, data = datos)
datos$preds <- predict(fit_plt)
datos$preds <- predict(fit_plt$gam)
datos$preds_se <- predict(fit_plt$gam, se = T)[[2]]
ggplot(data = datos, mapping = aes(x = Age)) +
geom_line(aes(y = res, group = BIDS.ID, color = Sex), size=.25) +
geom_point(aes(y = res, color = Sex)) +
geom_ribbon(aes(ymax = preds + 1.96 * preds_se,
ymin = preds - 1.96 * preds_se,
linetype = NA), alpha = 0.2) +
geom_line(aes(y = preds), size = 1.5) +
ylab("Residuals") + xlab("Age (y.o.)") + ggtitle(tda_var[tt]) +
theme_light()
# Generate plot
gSC <- ggplot(data = datos, mapping = aes(x = Age)) +
geom_line(aes(y = res, group = BIDS.ID, color = Sex), size=.25) +
geom_point(aes(y = res, color = Sex)) +
geom_ribbon(aes(ymax = preds + 1.96 * preds_se,
ymin = preds - 1.96 * preds_se,
linetype = NA), alpha = 0.2) +
geom_line(aes(y = preds), size = 1.5) +
ylab("Residuals") + xlab("Age (y.o.)") + ggtitle(tda_var[tt]) +
theme_light()
# Save plot
outfile <- paste0(plt_dir,"/GAMM_TDA_",tda_var[tt],"_sAge.svg")
ggsave(filename = outfile, plot = gSC, device = "svg", width = 4, height = 3)
tt <- 1
tt <- 2
# Compute model
# GAMM model (PDS LOESS)
grp_form <- as.formula(paste0(tda_var[tt], " ~ lo(~PDSe) + FDRMS + Coil + re(random = ~1|BIDS.ID)"))
fitPDS <- tryCatch(gamlss(grp_form, data = datos,
control = gamlss.control(n.cyc = 30)),
error=function(e) NA)
print(tryCatch(AIC(fitPDS), error=function(e) NA))
drop1(fitPDS)
# Calculate TDA variable residuals
res_frm <- as.formula(paste0(tda_var[tt], "~ FDRMS + Coil + (1|BIDS.ID)"))
datos$res <- scale(residuals(lmer(res_frm, data = datos, REML = F)))
plt_form <- as.formula("res ~ lo(~PDSe)")
fit_plt <- getSmo(gamlss(plt_form, data = datos))
datos$preds <- predict(fit_plt)
datos$preds_se <- predict(fit_plt, se = T)[[2]]
# Generate plot
gSC <- ggplot(data = datos, mapping = aes(x = PDSe)) +
geom_line(aes(y = res, group = BIDS.ID, color = Sex), size=.25) +
geom_point(aes(y = res, color = Sex)) +
geom_ribbon(aes(ymax = preds + 1.96 * preds_se,
ymin = preds - 1.96 * preds_se,
linetype = NA), alpha = 0.2) +
geom_line(aes(y = preds), size = 1.5) +
ylab("Residuals") + xlab("PDS") + ggtitle(tda_var[tt]) +
theme_light()
gSC
# Plot against Age as well, as a supportive info
# Calculate TDA variable residuals
plt_form <- as.formula("res ~ + s(Age)")
fit_plt <- gamm4(plt_form, data = datos)
datos$preds <- predict(fit_plt$gam)
datos$preds_se <- predict(fit_plt$gam, se = T)[[2]]
# Generate plot
gSC <- ggplot(data = datos, mapping = aes(x = Age)) +
geom_line(aes(y = res, group = BIDS.ID, color = Sex), size=.25) +
geom_point(aes(y = res, color = Sex)) +
geom_ribbon(aes(ymax = preds + 1.96 * preds_se,
ymin = preds - 1.96 * preds_se,
linetype = NA), alpha = 0.2) +
geom_line(aes(y = preds), size = 1.5) +
ylab("Residuals") + xlab("Age (y.o.)") + ggtitle(tda_var[tt]) +
theme_light()
# Save plot
outfile <- paste0(plt_dir,"/GAMM_TDA_",tda_var[tt],"_sAge.svg")
gSC
# Save plot
outfile <- paste0(plt_dir,"/GAMM_TDA_",tda_var[tt],"_sAge.svg")
ggsave(filename = outfile, plot = gSC, device = "svg", width = 4, height = 3)
library(ggraph)
install.packages("ggraph")
library(ggraph)
library(igraph)
graph <- graph_from_data_frame(highschool)
# Not specifying the layout - defaults to "auto"
ggraph(graph) +
geom_edge_link(aes(colour = factor(year))) +
geom_node_point()
View(highschool)
DF <- data.frame(from=c(1,1,1,2,2,3,3,3), to=c(2,3,4,1,4,2,1,4))
ggraph(DF) +
geom_edge_link() +
geom_node_point()
ggraph(DF) +
geom_edge_link() +
geom_node_circle()
ggraph(DF) +
geom_edge_link() +
geom_node_node()
ggraph(DF) +
geom_edge_link() +
geom_node_point()
ggraph(DF) +
geom_edge_link() +
geom_node_circle(r=2)
ggraph(DF, "circlepack") +
geom_edge_link() +
geom_node_circle()
ggraph(DF) +
geom_edge_link() +
geom_node_circle()
ggraph(DF) +
geom_edge_link() +
geom_node_circle(r=pi)
# Not specifying the layout - defaults to "auto"
ggraph(graph) +
geom_edge_link(aes(colour = factor(year))) +
geom_node_point()
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = factor(year))) +
geom_node_point()
layout <- createLayout(graph, layout = 'drl')
ggraph(layout) +
geom_edge_link(aes(colour = factor(year))) +
geom_node_point()
layout <- createLayout(graph, layout = 'drl')
layout <- create_layout(graph, layout = 'drl')
ggraph(layout) +
geom_edge_link(aes(colour = factor(year))) +
geom_node_point()
# An arc diagram
ggraph(graph, layout = 'linear') +
geom_edge_arc(aes(colour = factor(year)))
# A coord diagram
ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(colour = factor(year)))
graph <- graph_from_data_frame(flare$edges, vertices = flare$vertices)
# An icicle plot
ggraph(graph, 'partition') +
geom_node_tile(aes(fill = depth), size = 0.25)
# A sunburst plot
ggraph(graph, 'partition', circular = TRUE) +
geom_node_arc_bar(aes(fill = depth), size = 0.25)
# Library
library(igraph)
# Create data
set.seed(1)
data <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nc=10)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
data <- matrix(sample(0:1, 25, replace=TRUE, prob=c(0.8,0.2)), nc=10)
data <- matrix(sample(0:1, 25, replace=TRUE, prob=c(0.8,0.2)), nc=5)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
# Create data
set.seed(2)
data <- matrix(sample(0:1, 25, replace=TRUE, prob=c(0.8,0.2)), nc=5)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
data <- matrix(sample(0:1, 36, replace=TRUE, prob=c(0.8,0.2)), nc=6)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
data <- matrix(sample(0:1, 49, replace=TRUE, prob=c(0.8,0.2)), nc=7)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
# Create data
set.seed(1)
data <- matrix(sample(0:1, 49, replace=TRUE, prob=c(0.8,0.2)), nc=7)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
plot(network, vertex.label="")
plot(network, vertex.label="", vertex.label.color="cyan")
plot(network, vertex.label="", vertex.label.color=c("white","cyan"))
plot(network, vertex.label="", vertex.color="cyan")
plot(network, vertex.label="", vertex.color="olive")
plot(network, vertex.label="", vertex.color="darkolive")
plot(network, vertex.label="", vertex.color="pink")
plot(network, vertex.label="", vertex.color="purple")
plot(network, vertex.label="", vertex.color="purple")
plot(network, vertex.label="", vertex.color="cadetblue")
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
getwd()
svg("graph.svg")
par(mar=c(0,0,0,0))
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
dev.off()
svg("graph.svg", width = 4, height = 3)
par(mar=c(0,0,0,0))
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
dev.off()
svg("graph.svg", width = 4, height = 3)
par(mar=c(0,0,0,0))
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
dev.off()
# Default network
svg("graph.svg", width = 2, height = 1)
par(mar=c(0,0,0,0))
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
dev.off()
svg("graph.svg", width = 2, height = 1)
par(mar=c(0,0,0,0))
plot(network, vertex.label="", vertex.color="cadetblue",
edge.color="red", edge.width=2)
dev.off()
library(NBR)
?nbr_lm
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 4, nperm = 5)
show(nbr_result)
?nbr_lm_aov
ncores <- 2
library(parallel)
if(detectCores() < ncores) ncores <- NULL
nbr_result <- nbr_lm_aov(net = frontal2D[,-(1:3)],
nnodes = 28, idata = frontal2D[,1:3],
mod = "~ Group + Sex * Age",
thrP = 0.01, nperm = 5, cores = ncores)
show(nbr_result)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = 0.01, nperm = 5)
show(nbr_result)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = 0.05, nperm = 5)
show(nbr_result)
library(devtools)
install.packages("caret")
library(caret)
?train
?caret::train
q()
x <- rnorm(100)
y <- rpois(100)
y <- rpois(100,0.3)
y <- rweibull(100)
y <- rnorm(100)+log(2*x)
y <- rnorm(100)+log(abs(x))
cor(x,y)
y <- rnorm(100)+x^3
cor(x,y)
cor(x,y, method = "spearman")
cor(rank(x),y)
cor(rank(x),rank(y))
getwd()
setwd("R/github/NBR/")
library(devtools)
chech
check()
# Inputs
net <- NBR:::frontal3D
?nbr_lm
nnodes <- 28
idata <- NBR:::frontal_phen
net <- NBR:::frontal3D
nnodes <- 28
idata <- NBR:::frontal_phen
mod <- "~ Group + Sex * Age"
thrP <- NULL
thrT <- 4
nperm <- 5
diag <- FALSE
cores <- NULL
nudist <- FALSE
expList <- NULL
verbose <- TRUE
# Check 'diag' and 'nnodes'
if(!is.logical(diag)) stop("STOP: diagonal variable must be logical!")
if(nnodes%%1 != 0) stop("STOP: number of nodes must be integer!!")
# Edge positions
tri_pos <- which(upper.tri(matrix(nrow = nnodes, ncol = nnodes), diag = diag),
arr.ind = T)
# Check if everything is alright
net_dim <- dim(net)
# If 3D input, reshape to 2D
if(length(net_dim)==3){
# Check number of variables
if(!all(net_dim[1:2]==nnodes)) stop("STOP: number of matrix variables does not match volume dimmensions")
# Extract edges
mx <- sapply(1:nrow(tri_pos), function(x) net[tri_pos[x,1],tri_pos[x,2],])
} else if(length(net_dim)==2){
# Check number of variables
if(net_dim[2] != nrow(tri_pos)) stop("STOP: number of matrix variables does not match column numbers")
# Extract edges
mx <- net
} else stop("STOP: network input has to be a 2D or 3D array!!")
if(nrow(idata)!=nrow(mx)) stop("STOP: network volume dimension 3 and dataset must match!!")
if(nperm%%1 != 0) stop("STOP: number of permutations must be integer!!")
if(!is.numeric(as.matrix(mx))) stop("STOP: network array is not numeric!!")
# Apply example model edgewise
lm_form <- as.formula(paste0("mx[,",1,"]",mod))
fit_ex <- coefficients(summary(lm(lm_form, idata)))
fit_ex
View(t.test)
install.packages("brainGraph")
install.packages("https://cran.r-project.org/src/contrib/Archive/brainGraph/brainGraph_2.7.3.tar.gz", repos=NULL, type="source")
install.packages("ade4")
install.packages("https://cran.r-project.org/src/contrib/Archive/brainGraph/brainGraph_2.7.3.tar.gz", repos=NULL, type="source")
install_version("brainGraph", version = "2.7.3", repos = "http://cran.us.r-project.org")
library(brainGraph)
View(glm_stats)
View(NBS)
alternative <- "two.sided"
alt <- match.arg(alternative)
alt <- match.arg(alternative, c("two.sided","less", "greater"))
alt <- match.arg("g", c("two.sided","less", "greater"))
alt <- match.arg("perro", c("two.sided","less", "greater"))
# Create empty object to store F-statistic and p-values edgewise
obsT <- matrix(0, nrow = nrow(tri_pos), ncol = (nrow(fit_ex)-1)*2)
fit_ex
# Compute observed stats
if(verbose) cat("Computing observed stats")
fit_ex <- coefficients(summary(lm(lm_form, idata, alternative="t")))
fit_ex
